$ git config --global user.name "your name"
$ git config --global user.email "email@example.com"

安装git后最后一步设置  


$ pwd    显示当前目录
$ git init      把当前目录变成Git可以管理的仓库
$ ls -ah        显示隐藏文件


$ git add file.txt       添加文件到缓存区
$ git add -all
$ git commit -m"tags"    将缓存区文件提交到仓库


$ git status             查看仓库状态
$ git diff 							 查看修改内容

$ git log 							 查看历史记录
$ git log --pretty=oneline		查看简略信息

$ git reset --hard HEAD^     退回上一版本(HEAD^^ 代表上上个网站  HEAD~100  上100个版本)
$ git reset --hard xxxxxx    指定回到未来的某个版本   版本号不必写全
$ git reflog             ````查看命令历史
$ cat file.txt					查看文件

$ git checkout -- file.txt      丢弃工作区的修改
$ git reset HEAD file.txt  			可以把暂存区的修改撤销掉，重新放回工作区

$ rm file.txt                   删除文件
$ git checkout -- file.txt			恢复文件，前提是版本库中还有文件
$ git rm file.txt								从版本库中删除文件，删除后要commit 一下



搭建远程仓库
首先查看用户目录里是否有.ssh目录，没有的话通过
$ ssh-keygen -t rsa -C"email@example.com"			创建sshkey
目录里的 id_rsa 是私钥 id_rsa.pub 是公钥

登陆github 打开Account settings -> sshkey  -> title 任意。将公钥粘贴在key里

创建项目，通过push上传库
$ git remote add origin https://github.com/alreadyshow/personalweb.git
创建一个 origin 远程库
$ git push -u origin master
把本地库的内容上传到远程库中




GitHub给出的地址不止一个，还可以用https://github.com/michaelliao/gitskills.git这样的地址。实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。

使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。

$ git clone git@github.com:alreadyshow/gitskills.git
远程库克隆到本地库中

创建分支

$ git checkout -b dev			git checkout -b 参数表示创建并切换
$ git branch dev						创建
$ git checkout dev					切换

$ git branch							查看当前分支

合并分支
$ git merge dev						git merge 合并指定分支到当前分支

$ git merge --no-ff -m "tags" dev			--no-ff 表示禁用 Fast forward
此次合并回创建一个新的commit 需要加上 -m

删除分支
$ git branch -d dev	

查看分支
$ git log --graph --pretty=oneline --abbrev-commit		

BUG分支

$ git stash									保存工作区，但不提交
$ git stash list						查看保存的工作区
$ git stash apply 					回复工作区，恢复后stash内容不删除。
$ git stash drop						删除stash内容
$ git stash pop							恢复工作区，并删除stash

Feature分支

$ git branch -D dev  				强行删除分支 (强行删除一个没有被合并过的分支)

多人协作

$ git remote 						查看远程库的信息
$ git remote -v 					显示更详细的信息
$ git push origin master			推送master分支 

多人协作的工作模式通常是这样：

1、首先，可以试图用git push origin branch-name推送自己的修改；

2、如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

3、如果合并有冲突，则解决冲突，并在本地提交；

4、没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！

如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。


查看远程库信息，使用git remote -v；

本地新建的分支如果不推送到远程，对其他人就是不可见的；

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。


标签管理
标签不是按照时间顺序列出的，而是按照字母排序的
$ git tag <name>   						创建标签
$ git tag 								查看标签
$ git tag <name> <num> 					给对应版本号打标签
$ git show <tagname>					查看标签信息
$ git tag -a <tagname> -m "say" <num>	通过版本号创建带有说明文字的标签
$ git -d <tagname>						删除对应标签
$ git push origin <tagname>				push到远程库中
创建的标签都只存储在本地，不会自动推送到远程
$ git push origin --tags				一次性推送所有尚未推送到远程的本地标签
删除远程库中的标签时，需先删除本地标签，再删除远程
$ git tag -d <tagname>
$ git push origin :refs/tags/<tagname>	

同时关联github和gitee
首先删除已关联的origin库
$ git remote rm origin
然后关联github的远程库
$ git remote add github git@github.com:alreadyshow/learnGit.git
再关联码云的远程库
$ git remote add gitee git@gitee.com:alreadyshow/learnGit.git
然后可以查看远程库的状态
$ git remote -v


git自定义
$ git config --global color.ui true			让git显示颜色

遇到的问题


windows push时会出现 warning: LF will be replaced by CRLF
原因：在windows中的换行符为 CRLF， 而在linux下的换行符为：LF
使用git来生成一个 new 工程后，文件中的换行符为LF， 当执行 git add .时，系统提示：LF 将被转换成 CRLF

解决：删除刚刚生成的.git文件
    $ rm -rf .git  
    $ git config --gobal core.autocrlf false  //配置 不自动转换 换行符
	$ git init  
	$ git add . 
	完美运行

	
出现 error: failed to push some refs to 'https://github.com/CrazyDony/text.git'
可能时本地版本过低的原因
$ git push -u origin master -f
可以解决

